{
  "StartAt": "GetS3Input",
  "States": {
    "GetS3Input": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-2:292057XXXXXX:function:PassInput",
        "Payload": {
          "Input.$": "$"
        }
      },
      "Next": "WaitForInput"
    },
    "WaitForInput": {
      "Type": "Wait",
      "InputPath": "$.Payload",
      "Seconds": 5,
      "Next": "AllExtracts"
    },
    "AllExtracts": {
      "Type": "Parallel",
      "InputPath": "$",
      "ResultPath": "$.response.all_extracts",
      "OutputPath": "$.InputSchema",
      "Next": "RunUtilTransform",
      "Branches": [
        {
          "Comment": "LeftBranch",
          "StartAt": "S_Branch",
          "States": {
            "S_Branch": {
              "Type": "Parallel",
              "InputPath": "$",
              "ResultPath": "$.response.S_Branch",
              "End": true,
              "Branches": [
                {
                  "StartAt": "AuroraCrawlerActivity",
                  "States": {
                    "AuroraCrawlerActivity": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:SB_AuroraCrawler",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_aurora_crawler_activity",
                      "TimeoutSeconds": 3600,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 2
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "AuroraCrawlerFailed"
                        }
                      ],
                      "Next": "AuroraCrawlerPassed"
                    },
                    "AuroraCrawlerFailed": {
                      "Type": "Fail"
                    },
                    "AuroraCrawlerPassed": {
                      "Type": "Pass",
                      "Next": "SB_ExtractJobs"
                    },
                    "SB_ExtractJobs": {
                      "Type": "Map",
                      "InputPath": "$",
                      "ItemsPath": "$.InputSchema.SB_ExtractJobs",
                      "ResultPath": "$.response.sp_extract_jobs",
                      "MaxConcurrency": 10,
                      "Iterator": {
                        "StartAt": "SB_RunJob",
                        "States": {
                          "SB_RunJob": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::glue:startJobRun.sync",
                            "OutputPath": "$.JobRunState",
                            "Parameters": {
                              "JobName.$": "$.JobName"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Glue.ConcurrentRunsExceededException",
                                  "Glue.ResourceNumberLimitExceededException",
                                  "Glue.AWSGlueException",
                                  "Glue.ThrottlingException"
                                ],
                                "IntervalSeconds": 30,
                                "BackoffRate": 1.5,
                                "MaxAttempts": 5
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      "Next": "SB_ExtractJobsPassed"
                    },
                    "SB_ExtractJobsPassed": {
                      "Type": "Pass",
                      "Next": "SB_Crawlers"
                    },
                    "SB_Crawlers": {
                      "Type": "Parallel",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_crawlers",
                      "End": true,
                      "Branches": [
                        {
                          "StartAt": "SB_ExtractCrawler",
                          "States": {
                            "SB_ExtractCrawler": {
                              "Type": "Parallel",
                              "InputPath": "$",
                              "ResultPath": "$.response.sp_extract_crawler",
                              "End": true,
                              "Branches": [
                                {
                                  "StartAt": "SB_ExtractCrawlerActivity",
                                  "States": {
                                    "SB_ExtractCrawlerActivity": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:SB_ExtractCrawler",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_extract_activity",
                                      "TimeoutSeconds": 3600,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1.5,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_ExtractCrawlerFailed"
                                        }
                                      ],
                                      "Next": "SB_ExtractCrawlerPassed"
                                    },
                                    "SB_ExtractCrawlerFailed": {
                                      "Type": "Fail"
                                    },
                                    "SB_ExtractCrawlerPassed": {
                                      "Type": "Pass",
                                      "End": true
                                    }
                                  }
                                },
                                {
                                  "StartAt": "WaitForExtractCrawlerWorkerAvailability",
                                  "States": {
                                    "WaitForExtractCrawlerWorkerAvailability": {
                                      "Type": "Wait",
                                      "Seconds": 5,
                                      "Next": "InvokeExtractCrawlerWorker"
                                    },
                                    "InvokeExtractCrawlerWorker": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_extract_crawler_worker",
                                      "Parameters": {
                                        "FunctionName": "TriggerCrawler",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Extract_Crawler"
                                        }
                                      },
                                      "TimeoutSeconds": 300,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "WaitForExtractCrawlerToComplete"
                                        }
                                      ],
                                      "Next": "WaitForExtractCrawlerToComplete"
                                    },
                                    "WaitForExtractCrawlerToComplete": {
                                      "Type": "Wait",
                                      "Seconds": 60,
                                      "Next": "SB_ExtractCrawlerCheckStatus"
                                    },
                                    "SB_ExtractCrawlerCheckStatus": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CheckCrawlerStatus",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Extract_Crawler"
                                        }
                                      },
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_ExtractCrawlerCheckFailed"
                                        }
                                      ],
                                      "Next": "SB_ExtractCrawlerCheckPassed"
                                    },
                                    "SB_ExtractCrawlerCheckFailed": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CrawlerCheckFail",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Extract_Crawler"
                                        }
                                      },
                                      "End": true
                                    },
                                    "SB_ExtractCrawlerCheckPassed": {
                                      "Type": "Pass",
                                      "Result": "SB_ExtractCrawlerCheckPassed",
                                      "End": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        },
                        {
                          "StartAt": "SB_HistoryCrawler",
                          "States": {
                            "SB_HistoryCrawler": {
                              "Type": "Parallel",
                              "InputPath": "$",
                              "ResultPath": "$.response.sp_history_crawler",
                              "End": true,
                              "Branches": [
                                {
                                  "StartAt": "SB_HistoryCrawlerActivity",
                                  "States": {
                                    "SB_HistoryCrawlerActivity": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:SB_HistoryCrawler",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_history_crawler_activity",
                                      "TimeoutSeconds": 3600,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1.5,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_HistoryCrawlerFailed"
                                        }
                                      ],
                                      "Next": "SB_HistoryCrawlerPassed"
                                    },
                                    "SB_HistoryCrawlerFailed": {
                                      "Type": "Fail"
                                    },
                                    "SB_HistoryCrawlerPassed": {
                                      "Type": "Pass",
                                      "End": true
                                    }
                                  }
                                },
                                {
                                  "StartAt": "WaitForHistoryCrawlerWorkerAvailability",
                                  "States": {
                                    "WaitForHistoryCrawlerWorkerAvailability": {
                                      "Type": "Wait",
                                      "Seconds": 5,
                                      "Next": "InvokeHistoryCrawlerWorker"
                                    },
                                    "InvokeHistoryCrawlerWorker": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_history_crawler_worker",
                                      "Parameters": {
                                        "FunctionName": "TriggerCrawler",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_History_Crawler"
                                        }
                                      },
                                      "TimeoutSeconds": 300,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "WaitForHistoryCrawlerToComplete"
                                        }
                                      ],
                                      "Next": "WaitForHistoryCrawlerToComplete"
                                    },
                                    "WaitForHistoryCrawlerToComplete": {
                                      "Type": "Wait",
                                      "Seconds": 60,
                                      "Next": "SB_HistoryCrawlerCheckStatus"
                                    },
                                    "SB_HistoryCrawlerCheckStatus": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_history_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CheckCrawlerStatus",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_History_Crawler"
                                        }
                                      },
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_HistoryCrawlerCheckFailed"
                                        }
                                      ],
                                      "Next": "SB_HistoryCrawlerCheckPassed"
                                    },
                                    "SB_HistoryCrawlerCheckFailed": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_history_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CrawlerCheckFail",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_History_Crawler"
                                        }
                                      },
                                      "End": true
                                    },
                                    "SB_HistoryCrawlerCheckPassed": {
                                      "Type": "Pass",
                                      "Result": "SB_HistoryCrawlerCheckPassed",
                                      "End": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "StartAt": "WaitForAuroraCrawlerWorkerAvailability",
                  "States": {
                    "WaitForAuroraCrawlerWorkerAvailability": {
                      "Type": "Wait",
                      "Seconds": 5,
                      "Next": "InvokeAuroraCrawlerWorker"
                    },
                    "InvokeAuroraCrawlerWorker": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_aurora_crawler_worker",
                      "Parameters": {
                        "FunctionName": "TriggerCrawler",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Aurora_Crawler"
                        }
                      },
                      "TimeoutSeconds": 300,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "WaitForAuroraCrawlerToComplete"
                        }
                      ],
                      "Next": "WaitForAuroraCrawlerToComplete"
                    },
                    "WaitForAuroraCrawlerToComplete": {
                      "Type": "Wait",
                      "Seconds": 60,
                      "Next": "AuroraCrawlerCheckStatus"
                    },
                    "AuroraCrawlerCheckStatus": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CheckCrawlerStatus",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Aurora_Crawler"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "AuroraCrawlerCheckFailed"
                        }
                      ],
                      "Next": "AuroraCrawlerCheckPassed"
                    },
                    "AuroraCrawlerCheckFailed": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CrawlerCheckFail",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Aurora_Crawler"
                        }
                      },
                      "End": true
                    },
                    "AuroraCrawlerCheckPassed": {
                      "Type": "Pass",
                      "Result": "AuroraCrawlerCheckPassed",
                      "End": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "Comment": "MiddleBranch",
          "StartAt": "SB_Pay_Branch",
          "States": {
            "SB_Pay_Branch": {
              "Type": "Parallel",
              "InputPath": "$",
              "ResultPath": "$.response.SB_Pay_Branch",
              "End": true,
              "Branches": [
                {
                  "StartAt": "SB_Pay_AuroraCrawlerActivity",
                  "States": {
                    "SB_Pay_AuroraCrawlerActivity": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:SB_Pay_AuroraCrawler",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_pay_aurora_crawler_activity",
                      "TimeoutSeconds": 3600,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 2
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "SB_Pay_AuroraCrawlerFailed"
                        }
                      ],
                      "Next": "SB_Pay_AuroraCrawlerPassed"
                    },
                    "SB_Pay_AuroraCrawlerFailed": {
                      "Type": "Fail"
                    },
                    "SB_Pay_AuroraCrawlerPassed": {
                      "Type": "Pass",
                      "Next": "SB_Pay_ExtractJobs"
                    },
                    "SB_Pay_ExtractJobs": {
                      "Type": "Map",
                      "InputPath": "$",
                      "ItemsPath": "$.InputSchema.SB_Pay_ExtractJobs",
                      "ResultPath": "$.response.sp_pay_extract_jobs",
                      "MaxConcurrency": 10,
                      "Iterator": {
                        "StartAt": "SB_Pay_RunJob",
                        "States": {
                          "SB_Pay_RunJob": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::glue:startJobRun.sync",
                            "OutputPath": "$.JobRunState",
                            "Parameters": {
                              "JobName.$": "$.JobName"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Glue.ConcurrentRunsExceededException",
                                  "Glue.ResourceNumberLimitExceededException",
                                  "Glue.AWSGlueException",
                                  "Glue.ThrottlingException"
                                ],
                                "IntervalSeconds": 30,
                                "BackoffRate": 1.5,
                                "MaxAttempts": 5
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      "Next": "SB_Pay_ExtractJobsPassed"
                    },
                    "SB_Pay_ExtractJobsPassed": {
                      "Type": "Pass",
                      "Next": "SB_Pay_Crawlers"
                    },
                    "SB_Pay_Crawlers": {
                      "Type": "Parallel",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_pay_crawlers",
                      "End": true,
                      "Branches": [
                        {
                          "StartAt": "PayExtractCrawler",
                          "States": {
                            "PayExtractCrawler": {
                              "Type": "Parallel",
                              "InputPath": "$",
                              "ResultPath": "$.response.sp_pay_extract_crawler",
                              "End": true,
                              "Branches": [
                                {
                                  "StartAt": "SB_Pay_ExtractCrawlerActivity",
                                  "States": {
                                    "SB_Pay_ExtractCrawlerActivity": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:SB_Pay_ExtractCrawler",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_pay_extract_activity",
                                      "TimeoutSeconds": 3600,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1.5,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_Pay_ExtractCrawlerFailed"
                                        }
                                      ],
                                      "Next": "SB_Pay_ExtractCrawlerPassed"
                                    },
                                    "SB_Pay_ExtractCrawlerFailed": {
                                      "Type": "Fail"
                                    },
                                    "SB_Pay_ExtractCrawlerPassed": {
                                      "Type": "Pass",
                                      "End": true
                                    }
                                  }
                                },
                                {
                                  "StartAt": "WaitForPayExtractCrawlerWorkerAvailability",
                                  "States": {
                                    "WaitForPayExtractCrawlerWorkerAvailability": {
                                      "Type": "Wait",
                                      "Seconds": 5,
                                      "Next": "InvokePayExtractCrawlerWorker"
                                    },
                                    "InvokePayExtractCrawlerWorker": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_pay_extract_crawler_worker",
                                      "Parameters": {
                                        "FunctionName": "TriggerCrawler",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Extract_Crawler"
                                        }
                                      },
                                      "TimeoutSeconds": 300,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "WaitForPayExtractCrawlerToComplete"
                                        }
                                      ],
                                      "Next": "WaitForPayExtractCrawlerToComplete"
                                    },
                                    "WaitForPayExtractCrawlerToComplete": {
                                      "Type": "Wait",
                                      "Seconds": 60,
                                      "Next": "SB_Pay_ExtractCrawlerCheckStatus"
                                    },
                                    "SB_Pay_ExtractCrawlerCheckStatus": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_pay_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CheckCrawlerStatus",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Extract_Crawler"
                                        }
                                      },
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "SB_Pay_ExtractCrawlerCheckFailed"
                                        }
                                      ],
                                      "Next": "SB_Pay_ExtractCrawlerCheckPassed"
                                    },
                                    "SB_Pay_ExtractCrawlerCheckFailed": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.sp_pay_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CrawlerCheckFail",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Extract_Crawler"
                                        }
                                      },
                                      "End": true
                                    },
                                    "SB_Pay_ExtractCrawlerCheckPassed": {
                                      "Type": "Pass",
                                      "Result": "PayExtractCrawlerCheckPassed",
                                      "End": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "StartAt": "WaitForPayAuroraCrawlerWorkerAvailability",
                  "States": {
                    "WaitForPayAuroraCrawlerWorkerAvailability": {
                      "Type": "Wait",
                      "Seconds": 5,
                      "Next": "InvokePayAuroraCrawlerWorker"
                    },
                    "InvokePayAuroraCrawlerWorker": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_pay_aurora_crawler_worker",
                      "Parameters": {
                        "FunctionName": "TriggerCrawler",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Aurora_Crawler"
                        }
                      },
                      "TimeoutSeconds": 300,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "WaitForPayAuroraCrawlerToComplete"
                        }
                      ],
                      "Next": "WaitForPayAuroraCrawlerToComplete"
                    },
                    "WaitForPayAuroraCrawlerToComplete": {
                      "Type": "Wait",
                      "Seconds": 60,
                      "Next": "SB_Pay_AuroraCrawlerCheckStatus"
                    },
                    "SB_Pay_AuroraCrawlerCheckStatus": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_pay_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CheckCrawlerStatus",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Aurora_Crawler"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "SB_Pay_AuroraCrawlerCheckFailed"
                        }
                      ],
                      "Next": "SB_Pay_AuroraCrawlerCheckPassed"
                    },
                    "SB_Pay_AuroraCrawlerCheckFailed": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.sp_pay_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CrawlerCheckFail",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.SB_Pay_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.SB_Pay_Aurora_Crawler"
                        }
                      },
                      "End": true
                    },
                    "SB_Pay_AuroraCrawlerCheckPassed": {
                      "Type": "Pass",
                      "Result": "SB_Pay_AuroraCrawlerCheckPassed",
                      "End": true
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "Comment": "RightBranch",
          "StartAt": "T_Branch",
          "States": {
            "T_Branch": {
              "Type": "Parallel",
              "InputPath": "$",
              "ResultPath": "$.response.T_Branch",
              "End": true,
              "Branches": [
                {
                  "StartAt": "T_AuroraCrawlerActivity",
                  "States": {
                    "T_AuroraCrawlerActivity": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:T_AuroraCrawler",
                      "InputPath": "$",
                      "ResultPath": "$.response.t_aurora_crawler_activity",
                      "TimeoutSeconds": 3600,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 2
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "T_AuroraCrawlerFailed"
                        }
                      ],
                      "Next": "T_AuroraCrawlerPassed"
                    },
                    "T_AuroraCrawlerFailed": {
                      "Type": "Fail"
                    },
                    "T_AuroraCrawlerPassed": {
                      "Type": "Pass",
                      "Next": "T_ExtractJobs"
                    },
                    "T_ExtractJobs": {
                      "Type": "Map",
                      "InputPath": "$",
                      "ItemsPath": "$.InputSchema.T_ExtractJobs",
                      "ResultPath": "$.response.t_extract_jobs",
                      "MaxConcurrency": 5,
                      "Iterator": {
                        "StartAt": "T_RunJob",
                        "States": {
                          "T_RunJob": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::glue:startJobRun.sync",
                            "OutputPath": "$.JobRunState",
                            "Parameters": {
                              "JobName.$": "$.JobName"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                    "Glue.ConcurrentRunsExceededException",
                                    "Glue.ResourceNumberLimitExceededException",
                                    "Glue.AWSGlueException",
                                    "Glue.ThrottlingException"
                                ],
                                "IntervalSeconds": 30,
                                "BackoffRate": 1.5,
                                "MaxAttempts": 5
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      "Next": "T_ExtractJobsPassed"
                    },
                    "T_ExtractJobsPassed": {
                      "Type": "Pass",
                      "Next": "T_Crawlers"
                    },
                    "T_Crawlers": {
                      "Type": "Parallel",
                      "InputPath": "$",
                      "ResultPath": "$.response.t_crawlers",
                      "End": true,
                      "Branches": [
                        {
                          "StartAt": "T_ExtractCrawler",
                          "States": {
                            "T_ExtractCrawler": {
                              "Type": "Parallel",
                              "InputPath": "$",
                              "ResultPath": "$.response.t_extract_crawler",
                              "End": true,
                              "Branches": [
                                {
                                  "StartAt": "T_ExtractCrawlerActivity",
                                  "States": {
                                    "T_ExtractCrawlerActivity": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:T_ExtractCrawler",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_extract_activity",
                                      "TimeoutSeconds": 3600,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1.5,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "T_ExtractCrawlerFailed"
                                        }
                                      ],
                                      "Next": "T_ExtractCrawlerPassed"
                                    },
                                    "T_ExtractCrawlerFailed": {
                                      "Type": "Fail"
                                    },
                                    "T_ExtractCrawlerPassed": {
                                      "Type": "Pass",
                                      "End": true
                                    }
                                  }
                                },
                                {
                                  "StartAt": "WaitForT_ExtractCrawlerWorkerAvailability",
                                  "States": {
                                    "WaitForT_ExtractCrawlerWorkerAvailability": {
                                      "Type": "Wait",
                                      "Seconds": 5,
                                      "Next": "InvokeT_ExtractCrawlerWorker"
                                    },
                                    "InvokeT_ExtractCrawlerWorker": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_extract_crawler_worker",
                                      "Parameters": {
                                        "FunctionName": "TriggerCrawler",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_Extract_Crawler"
                                        }
                                      },
                                      "TimeoutSeconds": 300,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "WaitForT_ExtractCrawlerToComplete"
                                        }
                                      ],
                                      "Next": "WaitForT_ExtractCrawlerToComplete"
                                    },
                                    "WaitForT_ExtractCrawlerToComplete": {
                                      "Type": "Wait",
                                      "Seconds": 60,
                                      "Next": "T_ExtractCrawlerCheckStatus"
                                    },
                                    "T_ExtractCrawlerCheckStatus": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CheckCrawlerStatus",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_Extract_Crawler"
                                        }
                                      },
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "T_ExtractCrawlerCheckFailed"
                                        }
                                      ],
                                      "Next": "T_ExtractCrawlerCheckPassed"
                                    },
                                    "T_ExtractCrawlerCheckFailed": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_extract_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CrawlerCheckFail",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Extract_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_Extract_Crawler"
                                        }
                                      },
                                      "End": true
                                    },
                                    "T_ExtractCrawlerCheckPassed": {
                                      "Type": "Pass",
                                      "Result": "T_ExtractCrawlerCheckPassed",
                                      "End": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        },
                        {
                          "StartAt": "T_HistoryCrawler",
                          "States": {
                            "T_HistoryCrawler": {
                              "Type": "Parallel",
                              "InputPath": "$",
                              "ResultPath": "$.response.t_history_crawler",
                              "End": true,
                              "Branches": [
                                {
                                  "StartAt": "T_HistoryCrawlerActivity",
                                  "States": {
                                    "T_HistoryCrawlerActivity": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:us-east-2:292057XXXXXX:activity:T_HistoryCrawler",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_history_crawler_activity",
                                      "TimeoutSeconds": 3600,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1.5,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "T_HistoryCrawlerFailed"
                                        }
                                      ],
                                      "Next": "T_HistoryCrawlerPassed"
                                    },
                                    "T_HistoryCrawlerFailed": {
                                      "Type": "Fail"
                                    },
                                    "T_HistoryCrawlerPassed": {
                                      "Type": "Pass",
                                      "End": true
                                    }
                                  }
                                },
                                {
                                  "StartAt": "WaitForT_HistoryCrawlerWorkerAvailability",
                                  "States": {
                                    "WaitForT_HistoryCrawlerWorkerAvailability": {
                                      "Type": "Wait",
                                      "Seconds": 5,
                                      "Next": "InvokeT_HistoryCrawlerWorker"
                                    },
                                    "InvokeT_HistoryCrawlerWorker": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_history_crawler_worker",
                                      "Parameters": {
                                        "FunctionName": "TriggerCrawler",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_History_Crawler"
                                        }
                                      },
                                      "TimeoutSeconds": 300,
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "WaitForT_HistoryCrawlerToComplete"
                                        }
                                      ],
                                      "Next": "WaitForT_HistoryCrawlerToComplete"
                                    },
                                    "WaitForT_HistoryCrawlerToComplete": {
                                      "Type": "Wait",
                                      "Seconds": 60,
                                      "Next": "T_HistoryCrawlerCheckStatus"
                                    },
                                    "T_HistoryCrawlerCheckStatus": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_history_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CheckCrawlerStatus",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_History_Crawler"
                                        }
                                      },
                                      "Retry": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "IntervalSeconds": 30,
                                          "BackoffRate": 1,
                                          "MaxAttempts": 20
                                        }
                                      ],
                                      "Catch": [
                                        {
                                          "ErrorEquals": [
                                            "States.ALL"
                                          ],
                                          "Next": "T_HistoryCrawlerCheckFailed"
                                        }
                                      ],
                                      "Next": "T_HistoryCrawlerCheckPassed"
                                    },
                                    "T_HistoryCrawlerCheckFailed": {
                                      "Type": "Task",
                                      "Resource": "arn:aws:states:::lambda:invoke",
                                      "InputPath": "$",
                                      "ResultPath": "$.response.t_history_crawler_check",
                                      "Parameters": {
                                        "FunctionName": "CrawlerCheckFail",
                                        "Payload": {
                                          "crawler.$": "$.InputSchema.CrawlerJobs.T_History_Crawler",
                                          "activity.$": "$.InputSchema.CrawlerActivities.T_History_Crawler"
                                        }
                                      },
                                      "End": true
                                    },
                                    "T_HistoryCrawlerCheckPassed": {
                                      "Type": "Pass",
                                      "Result": "T_HistoryCrawlerCheckPassed",
                                      "End": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "StartAt": "WaitForT_AuroraCrawlerWorkerAvailability",
                  "States": {
                    "WaitForT_AuroraCrawlerWorkerAvailability": {
                      "Type": "Wait",
                      "Seconds": 5,
                      "Next": "InvokeT_AuroraCrawlerWorker"
                    },
                    "InvokeT_AuroraCrawlerWorker": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.t_aurora_crawler_worker",
                      "Parameters": {
                        "FunctionName": "TriggerCrawler",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.T_Aurora_Crawler"
                        }
                      },
                      "TimeoutSeconds": 300,
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "WaitForT_AuroraCrawlerToComplete"
                        }
                      ],
                      "Next": "WaitForT_AuroraCrawlerToComplete"
                    },
                    "WaitForT_AuroraCrawlerToComplete": {
                      "Type": "Wait",
                      "Seconds": 60,
                      "Next": "T_AuroraCrawlerCheckStatus"
                    },
                    "T_AuroraCrawlerCheckStatus": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.t_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CheckCrawlerStatus",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.T_Aurora_Crawler"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "IntervalSeconds": 30,
                          "BackoffRate": 1,
                          "MaxAttempts": 20
                        }
                      ],
                      "Catch": [
                        {
                          "ErrorEquals": [
                            "States.ALL"
                          ],
                          "Next": "T_AuroraCrawlerCheckFailed"
                        }
                      ],
                      "Next": "T_AuroraCrawlerCheckPassed"
                    },
                    "T_AuroraCrawlerCheckFailed": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "InputPath": "$",
                      "ResultPath": "$.response.t_aurora_crawler_check",
                      "Parameters": {
                        "FunctionName": "CrawlerCheckFail",
                        "Payload": {
                          "crawler.$": "$.InputSchema.CrawlerJobs.T_Aurora_Crawler",
                          "activity.$": "$.InputSchema.CrawlerActivities.T_Aurora_Crawler"
                        }
                      },
                      "End": true
                    },
                    "T_AuroraCrawlerCheckPassed": {
                      "Type": "Pass",
                      "Result": "T_AuroraCrawlerCheckPassed",
                      "End": true
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "RunUtilTransform": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "ResultPath": "$.response.util_transform",
      "Parameters": {
        "JobName.$": "$.TransformJobs.util"
      },
      "Next": "RunParallelTransforms",
      "Retry": [
        {
          "ErrorEquals": [
            "Glue.ConcurrentRunsExceededException"
          ],
          "IntervalSeconds": 30,
          "BackoffRate": 1.5,
          "MaxAttempts": 5
        }
      ]
    },
    "RunParallelTransforms": {
      "Type": "Parallel",
      "InputPath": "$",
      "ResultPath": "$.response.parallel_transforms",
      "Next": "RunMultiBrandTransform",
      "Branches": [
        {
          "StartAt": "RunSPTransform",
          "States": {
            "RunSPTransform": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "InputPath": "$",
              "ResultPath": "$.response.parallel_transforms.sp",
              "Parameters": {
                "JobName.$": "$.TransformJobs.sp"
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Glue.ConcurrentRunsExceededException"
                  ],
                  "IntervalSeconds": 30,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 5
                }
              ]
            }
          }
        },
        {
          "StartAt": "RunT_Transform",
          "States": {
            "RunT_Transform": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "InputPath": "$",
              "ResultPath": "$.response.parallel_transforms.t",
              "Parameters": {
                "JobName.$": "$.TransformJobs.t"
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Glue.ConcurrentRunsExceededException"
                  ],
                  "IntervalSeconds": 30,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 5
                }
              ]
            }
          }
        },
        {
          "StartAt": "RunCoTransform",
          "States": {
            "RunCoTransform": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "InputPath": "$",
              "ResultPath": "$.response.parallel_transforms.co",
              "Parameters": {
                "JobName.$": "$.TransformJobs.co"
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Glue.ConcurrentRunsExceededException"
                  ],
                  "IntervalSeconds": 30,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 5
                }
              ]
            }
          }
        }
      ]
    },
    "RunMultiBrandTransform": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "InputPath": "$",
      "ResultPath": "$.response.multi_transform",
      "Parameters": {
        "JobName.$": "$.TransformJobs.multi"
      },
      "Next": "RunS3BatchExports",
      "Retry": [
        {
          "ErrorEquals": [
            "Glue.ConcurrentRunsExceededException"
          ],
          "IntervalSeconds": 30,
          "BackoffRate": 1.5,
          "MaxAttempts": 5
        }
      ]
    },
    "RunS3BatchExports": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "InputPath": "$",
      "ResultPath": "$.response.batch_exports",
      "Parameters": {
        "JobName.$": "$.ExportJobs.batch"
      },
      "End": true,
      "Retry": [
        {
          "ErrorEquals": [
            "Glue.ConcurrentRunsExceededException"
          ],
          "IntervalSeconds": 30,
          "BackoffRate": 1.5,
          "MaxAttempts": 5
        }
      ]
    }
  }
}
